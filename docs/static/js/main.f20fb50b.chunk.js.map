{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoriesOld","alert","type","value","onChange","target","getGifs","category","a","fetch","URL","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAkBvC,OACI,sBAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAa,MAAK,CAAEP,MACnCC,EAAc,KAEdO,MAAM,4BAKV,SACI,uBACIC,KAAK,OACLC,MAAQV,EACRW,SApBc,SAAER,GACxBF,EAAeE,EAAES,OAAOF,a,uBCPnBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACH,mCACJ,uCAFO,SAGIC,MAAMC,mDAAuBH,EAAvBG,6CAHV,cAGbC,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAVvB,kBAcZL,GAdY,4CAAH,sDCgBLQ,EAbK,SAAC,GAAa,IAAXN,EAAU,EAAVA,IACnB,OACI,sBAAKO,UAAU,yCAAf,UACI,qBAAKC,IAAKR,EAAIG,IAAKM,IAAKT,EAAIE,QAC5B,4BAAKF,EAAIE,YCsBNQ,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACZf,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAX,GACFY,YAAY,WACRH,EAAS,CACLhB,KAAMO,EACNO,SAAS,MAEd,UAEZ,CAACpB,IAEGqB,EDb0BK,CAAa1B,GAAjCa,EAHiB,EAGtBP,KAAac,EAHS,EAGTA,QAErB,OACI,qCACI,qBAAKJ,UAAU,yCAAf,cAA2DhB,EAA3D,OACEoB,GAAW,mBAAIJ,UAAU,wCAAd,yBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOL,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIC,aEQ/BiB,EArBM,WAAO,IAAD,EAEa1C,mBAAS,IAFtB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAIvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCZtC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f20fb50b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 0) {\n            setCategories( categoriesOld =>  [ inputValue ] );\n            setInputValue('');\n        } else {\n            alert('debes escribir un texto');\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;\n","export const getGifs = async( category ) => {\n    const API_KEY = 'O0m99USle0v2nQ80ci2tOObUxvzWI19m';\n    const URL = 'https://api.giphy.com/v1/gifs/search';\n    const response = await fetch(URL + '?limit=10&q=' + category + '&api_key=' + API_KEY);\n    const { data } = await response.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({ img }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\" >\n            <img src={img.url} alt={img.title}/>\n            <p>{ img.title}</p>\n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n    img: PropTypes.object.isRequired\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from '../components/GifGridItem';\n\nconst GifGrid = ({ category }) => {\n    \n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3  className=\"card animate__animated animate__fadeIn\"> { category } </h3>\n            { loading && <p  className=\"card animate__animated animate__flash\">Loading ...</p> }\n            <div className='card-grid'>\n                {\n                    images.map( (img) => (\n                        <GifGridItem key={img.id} img={img}/>\n                    ))\n                }\n            </div>\n        </>\n    );\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(images => {\n                setTimeout( () => {\n                    setState({\n                        data: images,\n                        loading: false\n                    })\n                }, 2000);\n            });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n   \n    const [categories, setCategories] = useState([]);\n    \n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid key={category} category={category} />\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}